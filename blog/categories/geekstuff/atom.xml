<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geekstuff | Questy.org]]></title>
  <link href="http://www.questy.org/blog/categories/geekstuff/atom.xml" rel="self"/>
  <link href="http://www.questy.org/"/>
  <updated>2015-01-15T21:43:22-06:00</updated>
  <id>http://www.questy.org/</id>
  <author>
    <name><![CDATA[Jerald Sheets]]></name>
    <email><![CDATA[questy@questy.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant and Docker Love]]></title>
    <link href="http://www.questy.org/blog/2015/01/15/vagrant-and-docker-love/"/>
    <updated>2015-01-15T20:31:59-06:00</updated>
    <id>http://www.questy.org/blog/2015/01/15/vagrant-and-docker-love</id>
    <content type="html"><![CDATA[<p>Not a full-on post, but more a note for myself to both investigate and test this&hellip; It would seem that Vagrant has now added provisioner support for Docker <a href="https://docs.vagrantup.com/v2/provisioning/docker.html">here</a>.  Be looking for a new post on this in the near future!</p>

<p>I&rsquo;m working steadily to start off the new year, so my posting may be somewhat sporadic, but I will continue to blog Puppet fundamentals, supporting tools, and related items as I have the chance.</p>

<p>And in that vein, I encountered something this week I wanted to share with you.</p>

<p>It would seem that the new feature whereby you can include facter facts in a module for pluginsync to distribute them, but using the new mechanism of:</p>

<p>/modulename/facts.d/external_fact</p>

<p>is not 100% reliable when distributing those facts.  By this, I mean the following observed behavior.</p>

<ol>
<li>You create your fact and place it in the above directory.  Say, a shell script that gives you a value.</li>
<li>You make your fact executable, and running it natively at the shell works perfectly.</li>
<li>You do a puppet agent run, and the fact syncs to the agent machine, but never becomes available in the facter table.</li>
<li>You find the sync&#8217;ed location of the fact (in the losgs from the sync) and run it manually, and it works perfectly.</li>
</ol>


<p>I spoke with some folks at Puppet just in a conversation describing what I was seeing and they suggested the following workaround:</p>

<p>Make the fact a file resource and place the fact in /etc/puppetlabs/facter/facts.d.  This makes the fact available to the facter system, and displays correctly in the facter table and responds to the facter -p <factname> as expected.</p>

<p>That&rsquo;s it for now!  Look for more to come on workflows and tools in the very near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PuppetConf 2014]]></title>
    <link href="http://www.questy.org/blog/2014/09/23/puppetconf-2014/"/>
    <updated>2014-09-23T13:19:37-05:00</updated>
    <id>http://www.questy.org/blog/2014/09/23/puppetconf-2014</id>
    <content type="html"><![CDATA[<p>Glad to be at PuppetConf with #ShadowSoft exploring all the latest and greatest in PuppetLabs.</p>

<p><img src="http://cvquesty.github.io/images/puppetconf.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Southeast Puppet User's Group September]]></title>
    <link href="http://www.questy.org/blog/2014/09/11/southeast-puppet-users-group-september/"/>
    <updated>2014-09-11T18:33:01-05:00</updated>
    <id>http://www.questy.org/blog/2014/09/11/southeast-puppet-users-group-september</id>
    <content type="html"><![CDATA[<p><img src="http://cvquesty.github.io/images/puppet_docker.jpg" alt="image" /></p>

<p>John Ray is bringing the Puppet + Docker goodness in his talk tonight: &ldquo;Deploying Docker Containers with Puppet&rdquo;.  Join us each month at the Shadow Soft offices for the latest in DEVOPS topics and information.  Always fun, lots of discussion and information surrounding Puppet topics and associated technologies.  There&rsquo;s always pizza and beverages of all kinds, and we&rsquo;ve finally moved into our new meeting/class rooms, so come on out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Toolbox Grows...]]></title>
    <link href="http://www.questy.org/blog/2014/06/11/toolbox-grows/"/>
    <updated>2014-06-11T11:57:18-05:00</updated>
    <id>http://www.questy.org/blog/2014/06/11/toolbox-grows</id>
    <content type="html"><![CDATA[<p>So far we&rsquo;ve gotten our heads around some important things.  First and foremost, vim.  Our editor and companion for creating great code and ways to see our code in action and be able to determine at a glance whether our syntax is correct.  Also, we&rsquo;ve looked at revision control.  The single largest &ldquo;CYA&rdquo; ohmygodimgladivegotanoldercopytorestoreto sort of paradigm where you can roll yourself back to previously &ldquo;known good&rdquo; revisions to save that day&hellip;besides that, it&rsquo;s just darned good practice to keep your code externally saved, revision controlled, and accessible.</p>

<p>I&rsquo;ve also talked about importance of workflow clarity and quality.  If you implement a poor workflow, you just have an automated <em>poor </em>workflow. Key word here is &ldquo;poor&rdquo;.</p>

<p>Next up on our browse through the &ldquo;toolbox&rdquo; is &ldquo;Vagrant&rdquo;.  What is this Vagrant, you ask?</p>

<p>Virtualization is paramount in today&rsquo;s world in a number of ways and for a number of reasons.  For extending your server farms to handle even more application expression, to expand your own desktop machines to test/try different operating systems, and even just rolling up an ad-hoc VM so you can try something without touching a &ldquo;real&rdquo; machine in your environment.</p>

<p>Some may disagree, but I&rsquo;ve found virtualization to be one of the most powerful tools added to the toolbox in years.  Not only can you prototype systems or applications, but you can prototype entire environments.  This is where Vagrant shines, and especially in the context of Puppet (master + clients), allows you to create a fully functioning Puppet environment upon which to develop, prototype, and test without ever jeopardizing even the least important system of your infrastructure.  I count that as a &ldquo;win&rdquo;.  Let&rsquo;s see what this tool can do.</p>

<p><em><strong>What <em>is</em> Vagrant?</strong></em></p>

<p>According to its website:</p>

<p>Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team.</p>

<p>To achieve its magic, Vagrant stands on the shoulders of giants. Machines are provisioned on top of VirtualBox, VMware, AWS, or any other provider. Then, industry-standard provisioning tools such as shell scripts, Chef, or Puppet, can be used to automatically install and configure software on the machine.</p>

<p>There&rsquo;s a lot there, but it&rsquo;s just a fancy way of saying exactly what I said before.  Vagrant is essentially a framework system that wraps your virtualization engine to manage <em>environments </em>of VMs.  Here is where Vagrant will hold the power for us.</p>

<p><em><strong>Virtualization</strong></em></p>

<p>If Vagrant is the framework, then Virtualization is the foundation.  Now, I&rsquo;ve chosen to use &ldquo;Virtualbox&rdquo; for my virtualization technology, but VMWare works every bit as well.  I am doing all my testing over Virtualbox, however, so YMMV.  Virtualbox is freely available from oracle, and you can download the appropriate version from Virtualbox at <a href="https://www.virtualbox.org.">https://www.virtualbox.org.</a>  I am running the latest version at 4.3.12 (as of this writing) and it serves the Vagrant system extremely well.</p>

<p><em><strong>Vagrant</strong></em></p>

<p>Next, you&rsquo;ll need to install Vagrant on your system.  You can find all the right packages at <a href="http://www.vagrantup.com.">http://www.vagrantup.com.</a>  I am currently running version 1.6.3 without errors.</p>

<p>[warning]I want to make a disclaimer here since I&rsquo;ve had an issue or two with Vagrant on a platform I don&rsquo;t use-Windows.  I am a Mac &amp; Linux user, and have had no issues using the Vagrant/Virtualbox combo on either of these.  However, literally every time I&rsquo;ve used Vagrant over Windows, it&rsquo;s just been a mess.  I&rsquo;ve known one person (ONE!) who has gotten Vagrant to work over Windows, and it required his getting into the product, editing code, etc.  As such, I wouldn&rsquo;t recommend it for those new to the platform.[/warning]</p>

<p>On the Mac platform, you get a .dmg file and can extract it run the installer.  Linux versions are available as RPM installs and Debian Packages.  Once you&rsquo;re installed, let&rsquo;s mess around a bit with Vagrant to see what we can do.</p>

<p><em><strong>Getting Started</strong></em></p>

<p>Vagrant is a unique tool in that it allows you to manage all these varied VMs, but adds a twist.  The big twist is that you don&rsquo;t have to have the <em>source </em>materials for the VMs you&rsquo;re installing.  In fact, the simplicity of turning up a new VM is astounding.  Take the following series of commands:</p>

<p>cd <your favorite directory>
mkdir precise32
cd precise32
vagrant init hashicorp/precise32
vagrant up</p>

<p>If your Vagrant is installed correctly, a number of things start to happen.  First, Vagrant places a file in your cwd called &ldquo;Vagrantfile&rdquo;.  Your vagrant file (indie) looks like this:</p>

<p><div><script src='https://gist.github.com/57647667b0b5ccf32c2a.js'></script>
<noscript><pre><code># -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don&#39;t touch unless you know what you&#39;re doing!
VAGRANTFILE_API_VERSION = &quot;2&quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = &quot;base&quot;

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.
  # config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network &quot;public_network&quot;

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider &quot;virtualbox&quot; do |vb|
  #   # Don&#39;t boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;1024&quot;]
  # end
  #
  # View the documentation for the provider you&#39;re using for more
  # information on available options.

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision &quot;cfengine&quot; do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = &quot;motd.cf&quot;
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision &quot;cfengine&quot; do |cf|
  #   cf.policy_server_address = &quot;10.0.2.15&quot;
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision &quot;puppet&quot; do |puppet|
  #   puppet.manifests_path = &quot;manifests&quot;
  #   puppet.manifest_file  = &quot;default.pp&quot;
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision &quot;chef_solo&quot; do |chef|
  #   chef.cookbooks_path = &quot;../my-recipes/cookbooks&quot;
  #   chef.roles_path = &quot;../my-recipes/roles&quot;
  #   chef.data_bags_path = &quot;../my-recipes/data_bags&quot;
  #   chef.add_recipe &quot;mysql&quot;
  #   chef.add_role &quot;web&quot;
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: &quot;foo&quot; }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision &quot;chef_client&quot; do |chef|
  #   chef.chef_server_url = &quot;https://api.opscode.com/organizations/ORGNAME&quot;
  #   chef.validation_key_path = &quot;ORGNAME-validator.pem&quot;
  # end
  #
  # If you&#39;re using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = &quot;ORGNAME-validator&quot;
end</code></pre></noscript></div>
</p>

<p>Note that this is a long file with a lot of explanatory documentation.  In actuality, the most important part of your Vagrantfile can be summed up here:</p>

<p><div><script src='https://gist.github.com/58af9e3c724cac754987.js'></script>
<noscript><pre><code># -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = &quot;2&quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &quot;base&quot;
end</code></pre></noscript></div>
</p>

<p>These are the lines that are uncommented plus the top two declaratives that tell Vagrant what to do.  It&rsquo;s a very simple file that does some very powerful things.  First, it checks your home directory in the ~/.vagrant.d location to see if you already have the &ldquo;precise32&rdquo; Vagrant source &ldquo;box&rdquo;.  (more on boxes later).  Next, if you do have this, it will simply start up a VM in your virtualization of choice with a randomized name.  For instance, mine is called &ldquo;precise32_default_1402504453444_30545&rdquo;.  Vagrant takes away the selection of an .iso image, connecting it to the virtual CD/DVD Rom, starting an installer, etc.  It simply sends you a pre-rolled image, places it in your .vagrant.d directory, and provisions the VM to respond to Vagrant commands, and starts it up within Virtualbox.  Precise32 is simply a test scenario, as Vagrant&rsquo;s site has quite a number of varied and specially configured &ldquo;box&rdquo; files that you can use to prototype on at their &ldquo;ready-made&rdquo; box discovery site: <a href="https://vagrantcloud.com/discover/featured.">https://vagrantcloud.com/discover/featured.</a>  You can install boxes with too many variations and differentiations to enumerate here, and that&rsquo;s not really the point for our purposes&hellip; you may find these of great assistance in your own workplace, but let&rsquo;s continue.</p>

<p>When you run your &ldquo;vagrant init&rdquo; command listed above, it places a Vagrantfile, and when you do a &ldquo;vagrant up&rdquo;, it automatically retrieves your box file, provisions, and starts the VM.  Now, by simply running &ldquo;vagrant ssh default&rdquo;, you are now logged into this virtual machine!  You also have full sudo to become root and do any sort of damage you may wish to do.  If you logout (&ldquo;exit&rdquo; or CTRL-D), and type &ldquo;vagrant destroy&rdquo;, the VM goes away and you have nothing in Virtualbox.</p>

<p>Were we to just stop here, the power inherent in being able to just have these &ldquo;Vagrantfiles&rdquo; (sort of like a &ldquo;Makefile&rdquo; for boxes) to spin up and down test scenarios at will is incredible.  But, let&rsquo;s look at this in light of the Vagrantfile, what it can do and how you can customize it.  There is an entire descriptive language surrounding Vagrant PLUS Vagrant has a plugin infrastructure whereby developers can extend Vagrant&rsquo;s capabilities.  We will capitalize on these later.</p>

<p>So, imagine a scenario where you can create a directory, copy a text file into it, run a single command, and it automatically provisions a 4-node Puppet Enterprise infrastructure, fully installed with a master and three agents, MCollective fully installed, PuppetDB installed and in use&hellip;  literally a full installation just like you would use for your infrastructure&hellip;  Now we get powerful.  NOW we have the ability to do some cool things.</p>

<p>Next time, that&rsquo;s exactly what we&rsquo;re going to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet User's Group]]></title>
    <link href="http://www.questy.org/blog/2014/05/08/puppet-users-group/"/>
    <updated>2014-05-08T18:59:35-05:00</updated>
    <id>http://www.questy.org/blog/2014/05/08/puppet-users-group</id>
    <content type="html"><![CDATA[<p>Going on right now at Shadow Soft!</p>

<p><a href="http://cvquesty.github.io/images/pug_robert.jpg"><img src="http://cvquesty.github.io/images/pug_robert.jpg" alt="20140508-195822.jpg" /></a></p>

<p>Excellent coverage of AWS automation.</p>
]]></content>
  </entry>
  
</feed>
